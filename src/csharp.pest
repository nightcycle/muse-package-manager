// This defines that the file must fully conform to the grammar rules
file = _{ SOI ~ (using_directive | namespace_declaration | any)+ ~ EOI }
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

// Match whitespace and comments, but don't capture them for our basic purposes
_whitespace = _{ WHITESPACE | comment }
comment = _{ single_line_comment | multi_line_comment }
single_line_comment = _{ "//" ~ (!NEWLINE ~ ANY)* }
multi_line_comment = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }


// Define how a 'using' directive looks
using_directive = { "using" ~ _whitespace* ~ identifier ~ ";" }
namespace_declaration = { "namespace" ~ _whitespace* ~ identifier ~ "{" ~ (any | namespace_declaration)* ~ "}" }

// An identifier, simplified (C# identifiers are more complex)
identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

// Match anything else, non-greedily, to allow the parser to skip over code details we're not focusing on
any = _{ (!("using" | "namespace" | ";") ~ ANY)+ }
